URL: https://medium.com/quick-code/token-based-authentication-for-django-rest-framework-44586a9a56fb

1. Update the settings.py file for the rest framework and token based authentication

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken'
]

2. Please also the following configuration for the rest_framework in the settings.py file

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated', )
}

3. Setup the Login Function and api route :
Now we write login function which returns the token associated with the user and make api route for the same using.

In the myproject folder create a views.py


from django.contrib.auth import authenticate
from django.views.decorators.csrf import csrf_exempt
from rest_framework.authtoken.models import Token
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from rest_framework.status import (
    HTTP_400_BAD_REQUEST,
    HTTP_404_NOT_FOUND,
    HTTP_200_OK
)
from rest_framework.response import Response


@csrf_exempt
@api_view(["POST"])
@permission_classes((AllowAny,))
def login(request):
    username = request.data.get("username")
    password = request.data.get("password")
    if username is None or password is None:
        return Response({'error': 'Please provide both username and password'},
                        status=HTTP_400_BAD_REQUEST)
    user = authenticate(username=username, password=password)
    if not user:
        return Response({'error': 'Invalid Credentials'},
                        status=HTTP_404_NOT_FOUND)
    token, _ = Token.objects.get_or_create(user=user)
    return Response({'token': token.key},
                    status=HTTP_200_OK)



Here we have created a login function which handled the POST request and get username and password as params and then authenticate them 
if they are correct then return the token if they are correct else return the not found response.


from django.contrib import admin
from django.urls import path
from .views import login


urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/login', login)  
]


python manage.py makemigrations
python manage.py migrate

python manage.py createsuperuser

4. Get the token by passing username and password in the body part
5. then pass the token anf get the data
Token f84115cad8a3c6b322045dfea4114075bc7acce5

@csrf_exempt
@api_view(["GET"])
def sample_api(request):
    data = {'sample_data': 123}
    return Response(data, status=HTTP_200_OK)
	
	
from django.contrib import admin
from django.urls import path
from .views import login, sample_api


urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/login', login),
    path('api/sampleapi', sample_api)
]